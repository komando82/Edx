using System;
using System.IO;

namespace dev275x.studentlist
{
    class Program
    {
        // The Main method 
        static void Main(string[] args)
        {
            /* Check arguments */
            if(args == null || args.Length != 1) 
            {
                ShowUsage();
                return; // Exit early
            }

            // Every operation requires us to load the student list.
            var studentList = LoadStudentList(Constants.StudentList);

            // TODO: Handle case when studentList is empty
            if (args[0] == Constants.ShowAll) 
            {
                // TODO: This action occurs multiple times. Consider refactoring into a method.
                var students = studentList.Split(Constants.StudentEntryDelimiter);
                foreach(var student in students) 
                {
                    Console.WriteLine(student);
                }
            }
            else if (args[0]== Constants.ShowRandom)
            {
                var students = studentList.Split(Constants.StudentEntryDelimiter);

                // TODO: The sequence of random mumbers generated by a single Random instance 
                // is supposed to be uniformly distributed. By creating a new Random instance
                // every time this operation is invoked, we run a risk of generating 
                // identical random numbers. Either reseed or call once when the program starts
                var rand = new Random();
                var randomIndex = rand.Next(0,students.Length);
                Console.WriteLine(students[randomIndex]);
            }
            // TODO: Contains is too arbitrary. The argument should start with this constant.
            else if (args[0].Contains(Constants.AddEntry))
            {
                var newEntry = args[0].Substring(1);

                // TODO: Handle duplicate student names.
                UpdateStudentList(studentList + Constants.StudentEntryDelimiter + newEntry, Constants.StudentList);
            }
            // TODO: Contains is too arbitrary. The argument should start with this constant.
            else if (args[0].Contains(Constants.FindEntry))
            { 
                // TODO: Implement a simpler search with Linq
                var students = studentList.Split(Constants.StudentEntryDelimiter);
                var searchTerm = args[0].Substring(1);
                var indexLocation = -1;
                for (int idx = 0; idx < students.Length; idx++)
                {
                    if (students[idx].Trim() == searchTerm.Trim())
                    {
                        indexLocation = idx;
                        break;
                    }
                }

                if(indexLocation >= 0)
                {   
                    Console.WriteLine($"Entry '{searchTerm}' found at index {indexLocation}");
                }
                else
                {
                    Console.WriteLine($"Entry '{searchTerm}' does not exist");
                }
            }
            else if (args[0].Contains(Constants.ShowCount))
            {
                var students = studentList.Split(Constants.StudentEntryDelimiter);
                Console.WriteLine(String.Format("{0} students found", students.Length));
            }
            else
            {
                ShowUsage();
            }
            
        }

        // Reads data from the given file.
        static string LoadStudentList(string fileName)
        {

            // The 'using' construct does the heavy lifting of flushing a stream
            // and releasing system resources the stream was using.
            using (var fileStream = new FileStream("students.txt",FileMode.Open))
            using (var reader = new StreamReader(fileStream))
            {

                // The format of our student list is that it is two lines.
                // The first line is a comma-separated list of student names.
                // The second line is a timestamp.
                // Let's just retrieve the first line, which is the student names.
                return reader.ReadLine();
            }
        }

        // Writes the given string of data to the file with the given file name.
        // This method also adds a timestamp to the end of the file.
        static void UpdateStudentList(string content, string fileName)
        {
            var timestamp = String.Format("List last updated on {0}", DateTime.Now);

            // The 'using' construct does the heavy lifting of flushing a stream
            // and releasing system resources the stream was using.
            using (var fileStream = new FileStream("students.txt",FileMode.Open))
            using (var writer = new StreamWriter(fileStream))
            {
                writer.WriteLine(content);
                writer.WriteLine(timestamp);
            }
        }

        static void ShowUsage()
        {
            Console.WriteLine("Usage: dotnet dev275x.rollcall.dll (a | r | c | +student | ?student)");
        }
    }
}
